<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1544692403662" stop="1544692405482">
  <name>test_login</name>
  <labels/>
  <test-cases>
    <test-case start="1544692403662" status="broken" stop="1544692405482">
      <name>TestLogin.test_login[1850000000-123456]</name>
      <failure>
        <message>URLError: &lt;urlopen error [WinError 10061] 由于目标计算机积极拒绝，无法连接。&gt;</message>
        <stack-trace>self = &lt;urllib.request.HTTPHandler object at 0x00000000036A7780&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;selenium.webdriver.remote.remote_connection.Request object at 0x00000000042BF240&gt;, http_conn_args = {}, host = '127.0.0.1:4723'
h = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
            http_class must implement the HTTPConnection API from http.client.
            """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update(dict((k, v) for k, v in req.headers.items()
                            if k not in headers))
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = dict((name.title(), val) for name, val in headers.items())
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
&gt;               h.request(req.get_method(), req.selector, req.data, headers)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:1254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;, method = 'POST', url = '/wd/hub/session'
body = b'{"desiredCapabilities": {"appPackage": "com.vcooline.aike", "appActivity": ".umanager.LoginActivity", "platformName": "Android", "deviceName": "192.168.237.101:5555", "platformVersion": "5.1"}}'
headers = {'Accept': 'application/json', 'Connection': 'close', 'Content-Length': '193', 'Content-Type': 'application/json;charset=UTF-8', ...}

    def request(self, method, url, body=None, headers={}):
        """Send a complete request to the server."""
&gt;       self._send_request(method, url, body, headers)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:1107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;, method = 'POST', url = '/wd/hub/session'
body = b'{"desiredCapabilities": {"appPackage": "com.vcooline.aike", "appActivity": ".umanager.LoginActivity", "platformName": "Android", "deviceName": "192.168.237.101:5555", "platformVersion": "5.1"}}'
headers = {'Accept': 'application/json', 'Connection': 'close', 'Content-Length': '193', 'Content-Type': 'application/json;charset=UTF-8', ...}

    def _send_request(self, method, url, body, headers):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = dict.fromkeys([k.lower() for k in headers])
        skips = {}
        if 'host' in header_names:
            skips['skip_host'] = 1
        if 'accept-encoding' in header_names:
            skips['skip_accept_encoding'] = 1
    
        self.putrequest(method, url, **skips)
    
        if 'content-length' not in header_names:
            self._set_content_length(body, method)
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, 'body')
&gt;       self.endheaders(body)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:1152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;
message_body = b'{"desiredCapabilities": {"appPackage": "com.vcooline.aike", "appActivity": ".umanager.LoginActivity", "platformName": "Android", "deviceName": "192.168.237.101:5555", "platformVersion": "5.1"}}'

    def endheaders(self, message_body=None):
        """Indicate that the last header line has been sent to the server.
    
            This method sends the request to the server.  The optional message_body
            argument can be used to pass a message body associated with the
            request.  The message body will be sent in the same packet as the
            message headers if it is a string, otherwise it is sent as a separate
            packet.
            """
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:1103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;
message_body = b'{"desiredCapabilities": {"appPackage": "com.vcooline.aike", "appActivity": ".umanager.LoginActivity", "platformName": "Android", "deviceName": "192.168.237.101:5555", "platformVersion": "5.1"}}'

    def _send_output(self, message_body=None):
        """Send the currently buffered request and clear the buffer.
    
            Appends an extra \\r\\n to the buffer.
            A message_body may be specified, to be appended to the request.
            """
        self._buffer.extend((b"", b""))
        msg = b"\r\n".join(self._buffer)
        del self._buffer[:]
    
&gt;       self.send(msg)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:934: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;
data = b'POST /wd/hub/session HTTP/1.1\r\nAccept-Encoding: identity\r\nContent-Type: application/json;charset=UTF-8\r\nAccept...tion/json\r\nUser-Agent: Python-urllib/3.5\r\nConnection: close\r\nHost: 127.0.0.1:4723\r\nContent-Length: 193\r\n\r\n'

    def send(self, data):
        """Send `data' to the server.
            ``data`` can be a string object, a bytes object, an array object, a
            file-like object that supports a .read() method, or an iterable object.
            """
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:877: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;

    def connect(self):
        """Connect to the host and port specified in __init__."""
        self.sock = self._create_connection(
&gt;           (self.host,self.port), self.timeout, self.source_address)

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\http\client.py:849: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('127.0.0.1', 4723), timeout = &lt;object object at 0x000000000018F160&gt;, source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None):
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        err = None
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except error as _:
                err = _
                if sock is not None:
                    sock.close()
    
        if err is not None:
&gt;           raise err

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\socket.py:712: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = ('127.0.0.1', 4723), timeout = &lt;object object at 0x000000000018F160&gt;, source_address = None

    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None):
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        A host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        err = None
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket(af, socktype, proto)
                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\socket.py:703: ConnectionRefusedError

During handling of the above exception, another exception occurred:

self = &lt;class 'test_login.TestLogin'&gt;

    def setup_class(self):
&gt;       self.login = PageLogin(get_driver())

scripts\test_login.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
base\get_driver.py:13: in get_driver
    return webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
..\..\..\AppData\Roaming\Python\Python35\site-packages\appium\webdriver\webdriver.py:36: in __init__
    super(WebDriver, self).__init__(command_executor, desired_capabilities, browser_profile, proxy, keep_alive)
..\..\..\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webdriver.py:87: in __init__
    self.start_session(desired_capabilities, browser_profile)
..\..\..\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webdriver.py:141: in start_session
    'desiredCapabilities': desired_capabilities,
..\..\..\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webdriver.py:199: in execute
    response = self.command_executor.execute(driver_command, params)
..\..\..\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\remote_connection.py:395: in execute
    return self._request(command_info[0], url, body=data)
..\..\..\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\remote_connection.py:463: in _request
    resp = opener.open(request, timeout=self._timeout)
d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:466: in open
    response = self._open(req, data)
d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:484: in _open
    '_open', req)
d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:444: in _call_chain
    result = func(*args)
d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:1282: in http_open
    return self.do_open(http.client.HTTPConnection, req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib.request.HTTPHandler object at 0x00000000036A7780&gt;, http_class = &lt;class 'http.client.HTTPConnection'&gt;
req = &lt;selenium.webdriver.remote.remote_connection.Request object at 0x00000000042BF240&gt;, http_conn_args = {}, host = '127.0.0.1:4723'
h = &lt;http.client.HTTPConnection object at 0x00000000036A4048&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
            http_class must implement the HTTPConnection API from http.client.
            """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update(dict((k, v) for k, v in req.headers.items()
                            if k not in headers))
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = dict((name.title(), val) for name, val in headers.items())
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers)
            except OSError as err: # timeout error
&gt;               raise URLError(err)
E               urllib.error.URLError: &lt;urlopen error [WinError 10061] 由于目标计算机积极拒绝，无法连接。&gt;

d:\lhm软件测试\就业班\07pythonlear\jsq\lib\urllib\request.py:1256: URLError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="16420-MainThread"/>
        <label name="host" value="Lhm"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
